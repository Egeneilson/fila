class Node: 
    def __init__(self, value):
        self.value = value
        self.next = None

class Queue:
    def __init__(self):
        self.front = None
        self.rear = None
         
    def enqueue(self, value):
        new_node = Node(value)

        if self.front == None:
            self.front = self.rear = new_node
            return
        self.rear.next = new_node
        self.rear = new_node

    def dequeue(self):
        if self.front == None:
            raise Exception("Queue is empty")
        temp = self.front
        self.front = self.front.next
        if self.front == None:
            self.rear = None
        return temp.value
    
    def peek(self):
        if self.front == None:
            raise Exception("Queue is empty")
        return self.front.value
    
    def is_empty(self):
        return self.front == None
    
    def display_queue(self):
        current = self.front
        while current != None:
            print(current.value, end=" ")
            current = current.next
    

# Criando e testando a fila
q = Queue()

# Adicionando e enfilerando os elementos 1, 2, 3 e 4
q.enqueue(1)
q.enqueue(2)
q.enqueue(3)
q.enqueue(4)

# Exibindo a lista enfileirada. OBS: os números começaram em 1 por causa da organização, assim o 4, 5 e 6 que vai ser adicionado, vão ser 5, 6 e 7 para ficar organizado
print("Fila depois de adicionar 1, 2, 3 e 4: ")
q.display_queue()

# Adicionando os itens 5, 6 e 7, na lista já criada e testada.
q.enqueue(5)
q.enqueue(6)
q.enqueue(7)

# Exibindo a fila depois de adicionar os elementos 5, 6 e 7
print("\nFila após adicionar 5,6 e 7 :")
q.display_queue()

# Eliminando os dois primeiros itens da lista
q.dequeue()
q.dequeue()

# Exibindo a fila após a eliminação dos dois primeiros itens da lista
print("\nFila após eliminar os dois primeiros itens:")
q.display_queue()

# Exibindo somente o primeiro item da lista
primeiro_elemento = q.peek()

# Exibindo o primeiro elemento da fila
print("\nPrimeiro itens da fila depos de eliminação dos dois primeiros:", primeiro_elemento)

# Verificando se a lista está vazia
fila_vazia = q.is_empty()

 # Imprimindo se a lista está vazia ou não
if fila_vazia:
    print("Fila está vazia")
else:
    print("Fila não está vazia")
